AWSTemplateFormatVersion: "2010-09-09"

Description: Amazon EKS - Node Group for Longhorn workers

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: EKS Cluster
        Parameters:
          - ClusterName
          - ClusterControlPlaneSecurityGroup
          - KubeletExtraArguments
      - Label:
          default: Worker Node Configuration
        Parameters:
          - NodeGroupName
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupDesiredCapacity
          - NodeAutoScalingGroupMaxSize
          - NodeInstanceType
          - NodeImageIdSSMParam
          - NodeImageId
          - NodeVolumeSize
          - NodeVolumeType
          - KeyName
          - DisableIMDSv1
      - Label:
          default: Worker Network Configuration
        Parameters:
          - VpcId
          - VpcCidr
          - Subnets
      - Label:
          default: EKS Parameters for AL2023
        Parameters:
          - EksApiServerEndpoint
          - EksCertificateAuthority
          - EksClusterDns
      - Label:
          default: Multus CNI Configuration
        Parameters:
          - MultusSubnets
          - MultusSecurityGroupIds

Parameters:
  ClusterControlPlaneSecurityGroup:
    Type: "AWS::EC2::SecurityGroup::Id"
    Description: The security group of the cluster control plane.

  ClusterName:
    Type: String
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: The EC2 Key Pair to allow SSH access to the instances

  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired capacity of Node Group ASG.

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 2
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.

  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 2
    Description: Minimum size of Node Group ASG.

  NodeGroupName:
    Type: String
    Description: Unique identifier for the Node Group.

  NodeImageId:
    Type: String
    Default: ""
    Description: (Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.

  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.30/amazon-linux-2023/x86_64/standard/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances. Change this value to match the version of Kubernetes you are using.

  DisableIMDSv1:
    Type: String
    Default: "false"
    AllowedValues:
      - "false"
      - "true"

  NodeInstanceType:
    Type: String
    Default: m6i.16xlarge
    Description: EC2 instance type for the node instances

  NodeVolumeSize:
    Type: Number
    Default: 20
    Description: Node volume size

  NodeVolumeType:
    Type: String
    Default: "gp3"
    Description: EBS volume type for nodes

  KubeletExtraArguments:
    Type: String
    Default:  "--node-labels=is_worker=true --topology-manager-policy=single-numa-node --cpu-manager-policy=static"
    Description: "Arguments to pass to the kubelet bootstrap script."

  EksApiServerEndpoint:
    Type: String
    Description: "EKS API Server Endpoint for joining to the cluster"

  EksCertificateAuthority:
    Type: String
    Description: "EKS CA for joining to the cluster"
  
  EksClusterDns:
    Type: String
    Default: "172.20.0.10"
    Description: IP of CoreDNS. Please use "kubectl describe svc kube-dns -n kube-system" to find this.

  Subnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The subnets where workers can be created.

  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: The VPC of the worker instances

  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: "The CIDR block of the VPC."

  MultusSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The List of Multus subnets from where multus 2ndary ENI will be connected to.

  MultusSecurityGroupIds:
    Type: "List<AWS::EC2::SecurityGroup::Id>"
    Description: The security groups of the Multus Network Interfaces. Along with the order of security group selection, each will be assigned to each MultusSubnet in above list. If number of security group doesn't match with number of multus subnets, then the 1st security group will be used for all multus subnets.

Mappings:
  PartitionMap:
    aws:
      EC2ServicePrincipal: "ec2.amazonaws.com"
    aws-us-gov:
      EC2ServicePrincipal: "ec2.amazonaws.com"
    aws-cn:
      EC2ServicePrincipal: "ec2.amazonaws.com.cn"
    aws-iso:
      EC2ServicePrincipal: "ec2.c2s.ic.gov"
    aws-iso-b:
      EC2ServicePrincipal: "ec2.sc2s.sgov.gov"

Conditions:
  HasNodeImageId: !Not
    - "Fn::Equals":
      - !Ref NodeImageId
      - ""

  IMDSv1Disabled:
    "Fn::Equals":
      - !Ref DisableIMDSv1
      - "true"

Resources:
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !FindInMap [PartitionMap, !Ref "AWS::Partition", EC2ServicePrincipal]
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Path: /

# NodeRole for EC2 API Call
  Ec2ApiAccessPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: NodeInstanceRole
    Properties:
      PolicyName: Ec2ApiAccessPolicy
      Roles: [
          !Ref NodeInstanceRole
        ]
      PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: [
                "ec2:AssignPrivateIpAddresses",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeSubnets",
                "ec2:ModifyInstanceAttribute"
              ]
              Resource: "*"

  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole

  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned
      VpcId: !Ref VpcId

  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443

  NodeSecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      ToPort: 443
  
  NodeSecurityGroupFromVpcCidrIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow all VPC traffics
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      CidrIp: !Ref VpcCidr

  NodeLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        DisableApiTermination: true
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: !Ref NodeVolumeType
        IamInstanceProfile:
          Arn: !GetAtt NodeInstanceProfile.Arn
        ImageId: !If
          - HasNodeImageId
          - !Ref NodeImageId
          - !Ref NodeImageIdSSMParam
        InstanceType: !Ref NodeInstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
        - !Ref NodeSecurityGroup
        UserData:
          Fn::Base64: 
            !Sub 
              - |
                MIME-Version: 1.0
                Content-Type: multipart/mixed; boundary="//"

                --//
                Content-Type: application/node.eks.aws
                
                ---
                apiVersion: node.eks.aws/v1alpha1
                kind: NodeConfig
                spec:
                  cluster:
                    apiServerEndpoint: ${API_SERVER_EP}
                    certificateAuthority: ${CA}
                    cidr: ${VPC_CIDR}
                    name: ${CLUSTER_NAME}
                  kubelet:
                    config:
                      clusterDNS:
                      - ${CLUSTER_DNS}                 
                    flags:
                    - ${KUBELET_ARGS}
                --//
                Content-Type: text/x-shellscript; charset="us-ascii"

                #!/bin/bash
                set -o xtrace
                # List your multus subnets and Security Group
                subnetids="${SubnetIds}"
                secgrpids="${SecGrpIds}"
                IFS=' ' read -ra subnetList <<< "$subnetids"
                IFS=' ' read -ra secGrpList <<< "$secgrpids"
                subnetListLen=${!#subnetList[@]}
                secGrpListLen=${!#secGrpList[@]}
                
                # If just one security group is defined, then use it for every subnet
                if [ $subnetListLen != $secGrpListLen ]; then
                    x=0
                    for subnet in "${!subnetList[@]}";
                    do
                        secGrpList[${!x}]="${!secGrpList[0]}"
                        x=$((x+1))
                    done
                fi 

                # create and attach multus interfaces as requested
                n=0
                for subnetId in "${!subnetList[@]}";
                do
                    secGrpId="${!secGrpList[n]}" 
                    ### Get ipv6 cidr if any
                    subnetipv6=`aws ec2 describe-subnets --subnet-ids ${!subnetId}\
                    --query "Subnets[*].Ipv6CidrBlockAssociationSet[*].Ipv6CidrBlock" --output text`

                    ### Create and attach interfaces, multus subnets and security groups are identified using tag Name:Value, 
                    ### checks if subnet has IPV6 if true provisioned ENI with IPv6 else only IPv4
                    if [ -n "$subnetipv6" ]; then
                        multusId=$(aws ec2 create-network-interface --subnet-id ${!subnetId} \
                        --description "VRF$((n+1))" --groups ${!secGrpId} --ipv6-address-count 1 \
                        --tag-specifications "ResourceType="network-interface",\
                        Tags=[{Key="node.k8s.amazonaws.com/no_manage",Value="true"}]" | jq -r '.NetworkInterface.NetworkInterfaceId');
                    else
                        multusId=$(aws ec2 create-network-interface --subnet-id ${!subnetId} \
                        --description "VRF$((n+1))" --groups ${!secGrpId} \
                        --tag-specifications "ResourceType="network-interface",\
                        Tags=[{Key="node.k8s.amazonaws.com/no_manage",Value="true"}]" | jq -r '.NetworkInterface.NetworkInterfaceId');
                    fi

                    ### Attach the multus interface to EC2 worker, adjust device-index incrementally for every new attachment
                    attachmentId=$(aws ec2 attach-network-interface --network-interface-id ${!multusId} \
                    --instance-id `curl -s http://169.254.169.254/latest/meta-data/instance-id` --device-index $((n+1 )) |jq -r '.AttachmentId')
                    #IFS=' ' read -ra attachmentId <<< $attachmentResult
                    aws ec2 modify-network-interface-attribute --network-interface-id ${!multusId} --no-source-dest-check
                    aws ec2 modify-network-interface-attribute --attachment "AttachmentId"=${!attachmentId},"DeleteOnTermination"="True" \
                    --network-interface-id ${!multusId}
                    n=$((n+1))
                done
                echo "net.ipv4.conf.default.rp_filter = 0" | tee -a /etc/sysctl.conf
                echo "net.ipv4.conf.all.rp_filter = 0" | tee -a /etc/sysctl.conf
                sudo sysctl -p
                echo "#!/usr/bin/env bash" > /etc/pm/power.d/node-init-script.sh
                ls /sys/class/net/ > /tmp/ethList;cat /tmp/ethList |while read line ; do sudo ifconfig $line up; done
                grep ens /tmp/ethList |while read line ; do echo "ifconfig $line up" >> /etc/pm/power.d/node-init-script.sh; done
                chmod +x /etc/pm/power.d/node-init-script.sh
                cat << EOF > /etc/systemd/system/node-init-script.service
                [Unit]
                Description=Run node-init-script
                After=cloud-init.service
                [Service]
                ExecStart=/etc/pm/power.d/node-init-script.sh
                [Install]
                WantedBy=network-online.target
                EOF
                systemctl enable node-init-script.service

                --//--
              - SubnetIds: !Join [ " ", !Ref MultusSubnets ]
                SecGrpIds: !Join [ " ", !Ref MultusSecurityGroupIds ]
                CLUSTER_NAME: !Ref ClusterName
                VPC_CIDR: !Ref VpcCidr
                CLUSTER_DNS: !Ref EksClusterDns
                KUBELET_ARGS: !Ref KubeletExtraArguments
                API_SERVER_EP: !Ref EksApiServerEndpoint
                CA: !Ref EksCertificateAuthority

        MetadataOptions:
          HttpPutResponseHopLimit : 2
          HttpEndpoint: enabled
          HttpTokens: !If
            - IMDSv1Disabled
            - required
            - optional

  NodeGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
      LaunchTemplate:
        LaunchTemplateId: !Ref NodeLaunchTemplate
        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      MinSize: !Ref NodeAutoScalingGroupMinSize
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub ${ClusterName}-${NodeGroupName}-Node
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          PropagateAtLaunch: true
          Value: owned
      VPCZoneIdentifier: !Ref Subnets
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
        PauseTime: PT5M

Outputs:
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn

  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup

  NodeAutoScalingGroup:
    Description: The autoscaling group
    Value: !Ref NodeGroup
